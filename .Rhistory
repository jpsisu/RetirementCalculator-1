missClass(testSA, predict(modFit, testSA, type = "response"))
length(predict(modFit, trainSA, type = "response"))
length(trainSA)
nrow(trainSA)
missClass(trainSA, predict(modFit, trainSA, type = "response"))
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modfit <- train(y ~ ., method = "rf", data = vowel.train)
modfit <- randoForest(y ~ ., data = vowel.test)
modfit <- randomForest(y ~ ., data = vowel.test)
?varlmp
library(caret)
?varlmp
?varImp
varImp(modfit)
varImp.randomForest(modfit)
?randomForest
modfit <- randomForest(y ~ ., data = vowel.train)
varImp(modfit)
mtcars$mpgsp <- ifelse(mtcars$mpg - 20 > 0, mtcars$mpg - 20, 0)
mtcars
install.packages("plotly")
library(plotly)
install.packages("googlevis")
install.packages("googleVis")
library(googleVis)
plot_ly(mtcars, x = disp, y = mpg, mode = "markers")
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
data(mtcars)
names(mtcars)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = qsec, y = mpg, mode = "markers")
plot_ly(mtcars, x = "qsec", y = "mpg", mode = "markers")
plot_ly(mtcars, x = "wt", y = "mpg", mode = "markers")
?plot_ly
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers")
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = ~disp)
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = ~cyl)
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = ~as.factor(cyl)
)
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = ~as.factor(cyl), size = ~hp)
terr <- matrix(rnorm(100*100), nrow = 100, ncol = 100)
plot_ly(terr, type = "heatmap")
terr <- as.data.frame(terr)
plot_ly(terr, type = "heatmap")
plot_ly(z = ~terr, type = "heatmap")
plot_ly(z = terr, type = "heatmap")
dim(terr)
class(terr)
?plot_ly
plot_ly(terr, type = "heatmap")
?pickXY
install.packages("shinyGadgets")
library(leaflet)
?makeIcon
library(jsonlite)
?jsonlite
data <- fromJSON("https://api.wmata.com/Rail.svc/json/jStations")
data <- fromJSON("https://api.wmata.com/Rail.svc/json/jStations", key = "e015b99f123840c0b20a815da1a60ce9")
data <- fromJSON("https://api.wmata.com/Rail.svc/json/jStations", api_key = "e015b99f123840c0b20a815da1a60ce9")
data <- fromJSON("https://api.wmata.com/Rail.svc/json")
data <- fromJSON("https://api.wmata.com/Rail.svc/json/jStations[lon]")
url <- "https://api.wmata.com/Rail.svc/json/jStations"
key <- "&api-key=e015b99f123840c0b20a815da1a60ce9"
data <- fromJSON(paste0(url,key))
data <- fromJSON(paste0(url, key))
key <- "&api_key=e015b99f123840c0b20a815da1a60ce9"
data <- fromJSON(paste0(url, key))
citibike <- fromJSON("http://citibikenyc.com/stations/json")
names(citibike)
head(citibike$stationBeanList)
df <- data.frame(latitude = citibike$stationBeanList$latitude, longitude = citibike$stationBeanList$longitude)
dim(df)
head(df)
map <- df %>% leaflet() %>% addTiles() %>% addMarkers()
map
?addMarkers
map <- df %>% leaflet() %>% addTiles() %>% addMarkers() %>% markerClusterOptions()
map
map <- df %>% leaflet() %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
map
dim(df)
rm(list=ls())
?show
?colSums
?lm
?dgamma
?predict
?mean
?show
library(plotly)
?plotly
?ggplotly
names(diamonds)
data(mtcars)
head(mtcars)
?datasets
library(help = "datasets")
data("EuStockMarkets")
stocks <- EuStockMarkets
head(stocks)
dim(stocks)
?EuStockMarkets
names(quakes)
names(volcano)
names(presidents)
data(presidents)
dim(presidents)
class(presidents)
summary(presidents)
presidents
plotl(data = presidents)
plot_ly(data = presidents)
presidents <- as.data.frame(presidents)
dim(presidents)
head(presidents)
data(sleep)
class(sleep)
head(sleep)
dim(sleep)
?sleep
names(airquality)
dim(airquality)
head(airquality)
tail(airquality)
p <- plot_ly(data = airquality[airquality$Month == 5], x = ~Day, y = ~Temp, name = paste('Month', Month), type = "scatter", mode = "lines")
p
p <- plot_ly(data = airquality[airquality$Month == 5, ], x = ~Day, y = ~Temp, name = paste('Month', Month), type = "scatter", mode = "lines")
p <- plot_ly(data = airquality[airquality$Month == 5, ], x = ~Day, y = ~Temp, name = paste('Month', airquality$Month), type = "scatter", mode = "lines")
p
library(reshape2)
?reshape2
?dcast
agm <- melt(airquality, id = c('month', 'day'), na.rm = T)
agm <- melt(airquality, id = c"month", na.rm = T)
agm <- melt(airquality, id = "month", na.rm = T)
agm <- melt(airquality, id = "Month", na.rm = T)
dim(agm)
head(agm)
agm <- melt(airquality, id = c("Month", "Day"), na.rm = T)
head(agm)
tail(agm)
?gather
agm <- melt(airquality, id = "Month", na.rm = T)
head(melt(airquality))
dim(melt(airquality))
head(airquality)
library(tidyr)
?separate
?spread
aqm <- spread(data = airquality, key = Month, value = Temp)
head(aqm)
library(dplyr)
aqm <- airquality %>% select(Temp, Day, Month) %>% spread(key = Month, value = Temp)
head(aqm)
aqm <- airquality %>% select(Temp, Day, Month) %>% spread(key = Month, value = Temp) %>% rename("May" = 5, "June" = 6, "July" = 7, "August" = 8, "September" = 9)
aqm <- airquality %>% select(Temp, Day, Month) %>% spread(key = Month, value = Temp) %>% rename(May = 5, June = 6, July = 7, August = 8, September = 9)
library(dplyr)
aqm <- airquality %>% select(Temp, Day, Month) %>% spread(key = Month, value = Temp) %>% rename(May = 5, June = 6, July = 7, August = 8, September = 9)
?rename
aqm <- airquality %>% select(Temp, Day, Month) %>% spread(key = Month, value = Temp) %>% rename(May = 5, June = 6, July = 7, August = 8, September = 9)
aqm <- airquality %>% select(Temp, Day, Month) %>% spread(key = Month, value = Temp) %>% rename('May' = 5, June = 6, July = 7, August = 8, September = 9)
aqm <- airquality %>% select(Temp, Day, Month) %>% spread(key = Month, value = Temp) %>% rename(May = '5', June = 6, July = 7, August = 8, September = 9)
aqm <- airquality %>% select(Temp, Day, Month) %>% spread(key = Month, value = Temp) %>% names(c("Day", "May", "June", "July", "August", "September"))
aqm <- airquality %>% select(Temp, Day, Month) %>% spread(key = Month, value = Temp) %>% names("Day", "May", "June", "July", "August", "September")
aqm <- airquality %>% select(Temp, Day, Month) %>% spread(key = Month, value = Temp) %>% colNames(c("Day", "May", "June", "July", "August", "September"))
aqm <- airquality %>% select(Temp, Day, Month) %>% spread(key = Month, value = Temp) %>% colnames(c("Day", "May", "June", "July", "August", "September"))
library(dplyr)
aqm <- airquality %>% select(Temp, Day, Month) %>% spread(key = Month, value = Temp) %>% rename(May = 5)
aqm <- airquality %>% select(Temp, Day, Month) %>% spread(key = Month, value = Temp) %>% rename(5 = May)
p <- plot_ly(data = aqm, x = ~Day, y = ~5, name = 'May', type = "scatter", mode = "lines") %>% add_trace(y = ~6, name = 'June', mode = "lines+markers") %>% add_trace(y = ~7, name = 'July', mode = "markers") %>% add_trace(y = ~8, name = 'August', mode = "lines") %>% add_trace(y = ~9, name = 'September', mode = "markers")
p
head(aqm)
class(aqm)
names(aqm)
names(aqm) <- c("Day", "May", "June", "July", "August", "September")
head(aqm)
p <- plot_ly(data = aqm, x = ~Day, y = ~May, name = 'May', type = "scatter", mode = "lines") %>% add_trace(y = ~June, name = 'June', mode = "lines+markers") %>% add_trace(y = ~July, name = 'July', mode = "markers") %>% add_trace(y = ~August, name = 'August', mode = "lines") %>% add_trace(y = ~September, name = 'September', mode = "markers")
p
p <- plot_ly(data = aqm, x = ~Day, y = ~May, name = 'May', type = "scatter", mode = "lines+markers") %>% add_trace(y = ~June, name = 'June', mode = "lines+markers") %>% add_trace(y = ~July, name = 'July', mode = "lines+markers") %>% add_trace(y = ~August, name = 'August', mode = "lines+markers") %>% add_trace(y = ~September, name = 'September', mode = "lines+markers")
p
p <- plot_ly(data = aqm, x = ~Day, y = ~May, name = 'May', type = "scatter", mode = "lines+markers") %>% add_trace(y = ~June, name = 'June', mode = "lines+markers") %>% add_trace(y = ~July, name = 'July', mode = "lines+markers") %>% add_trace(y = ~August, name = 'August', mode = "lines+markers") %>% add_trace(y = ~September, name = 'September', mode = "lines+markers") %>% layout(title = "Daily Temperatures in NYC", xaxis = list(title = "Day of the Month"), yaxis = list(title = "Temperature"))
p
?max
max(aqm)
max(aqm, na.rm = T)
t <- aqm %>% summarize()
t
t <- aqm %>% summarize("May")
t
rm(t)
a <- airquality %>% group_by(Month) %>% summarize(mean = mean(Temp, na.rm = T), max = max(Temp, na.rm = T), min = min(Temp, na.rm = T))
a
head(volcano)
?volcano
names(volcano)
class(volcano)
plot(volcano)
?datasets
library(help = "datasets")
class(Nile)
class(UKgas)
library(jsonlite)
citibike <- fromJSON("http://citibikenyc.com/stations/json")
class(citibkike)
class(citibike)
names(citibike)
names(citibike$stationBeanList)
View(citibike$stationBeanList)
View(citibike$executionTime)
View(filter(citibike$stationBeanList, !is.na(citibike$stationBeanList$landMark)))
library(shiny); print(source('C:/Users/yfriedman/Desktop/Coursera/R Shiny/mpg_cluster.R')$value)
View(citibike$executionTime)
View(citibike$stationBeanList)
library(help = "datasets")
head(Orange)
dim(Orange)
tail(Orange)
?Orange
head(USArrests)
dim(USArrests)
dim(USPersonalExpenditure)
USPersonalExpenditure
dim(airmiles)
dim(discoveries)
class(discoveries)
head(faithful)
head(infert)
dim(infert)
summary(infert)
?infert
head(precip)
head(sleep)
head(women)
head(titanic)
head(Titanic)
class(Titanic)
Titanic
names(Titanic)
?Titanic
head(mtcars)
?PlantGrowth
?UCBAdmissions
head(esoph)
View(presidents)
View(ability.cov)
install.packages("Lahman")
library(Lahman)
?`Lahman
?Lahman
data("LahmanData")
View(Master)
View(Batting)
head(airquality)
library(ggplot2)
head(mpg)
dim(mpg)
View(USJudgeRatings)
rm(list=ls())
head(morley)
?morley
data(Longley)
data(longley)
?longley
View(longley)
View(longley)
print(source('C:/Users/yfriedman/Desktop/Coursera/R Shiny/mtcars_formatted.R')$value)
library(caret)
?caret
View(BJsales)
View(freeny)
?freeny
View(euro)
View(nottem)
View(occupationalStatus)
View(precip)
View(pressure)
View(swiss)
lm(swiss$Fertility ~ Swiss$Catholic)
lm(swiss$Fertility ~ swiss$Catholic)
?education
data(swiss)
?education
?swiss
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
swiss[, c(Fertility, "Infant.Mortality")]
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
?nls
citibike <- fromJSON("http://citibikenyc.com/stations/json")
View(citibike)
?radioButtons
head(mpg)
summary(mpg)
dim(mpg)
tail(mpg)
print(source('C:/Users/yfriedman/Desktop/Coursera/R Shiny/mtcars_formatted.R')$value)
?checkboxGroupInput
data(Titanic)
head(Titanic)
View(Titanic)
?pmt
install.packages("finCal")
install.packages("FinCal")
?FinCal
library(FinCal)
?FinCal
?pv
?pmt
?wellPanel
?numericInput
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
?sliderInput
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
years.r <- 25
income.r <- 100000
pv(r = .04, n = years.r, pmt = income.r, type = 1)
),
print(source('C:/Users/yfriedman/Desktop/Coursera/Course 9/shiny test.R')$value)
print(source('C:/Users/yfriedman/Desktop/Coursera/Course 9/shiny test.R')$value)
print(source('C:/Users/yfriedman/Desktop/Coursera/Course 9/shiny test.R')$value)
print(source('C:/Users/yfriedman/Desktop/Coursera/Course 9/shiny test.R')$value)
print(source('C:/Users/yfriedman/Desktop/Coursera/Course 9/shiny test.R')$value)
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
print(source('C:/Users/yfriedman/Desktop/Coursera/Course 9/shiny test.R')$value)
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
df <- data.frame(x = 1:10, y = 10:20)
df <- data.frame(x = 1:10, y = 11:20)
y <- 50
df <- data.frame(x = 1:10, y = y)
df
for (i in nrow(df)) {cum <- sum(df[1,x]:df[i,x])}
for (i in nrow(df)) {cum <- sum(df[1,"x"]:df[i,"x"])}
df
cum
for (i in nrow(df)) {df$cum <- sum(df[1,"x"]:df[i,"x"])}
df
sum(df$x)
df <- data.frame(x = 1:10, y = y)
df
sum(df[1,"x"]:df[5, "x"])
for (i in 1:nrow(df)) {df$cum <- sum(df[1,"x"]:df[i,"x"])}
df
df <- data.frame(x = 1:10, y = 50)
df
?cumsum
df$cumsum <- cumsum(df$x)
df
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
.07/12
1500 * ((1 + .0058) ^ 360)
df <- data.frame(x = 1:10, y = 50)
df$cumsum <- cumsum(df$x)
df
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
df <- data.frame(x = 1:10, y = 1458, z = .07/12)
df
df <- data.frame(x = 1:10, y = 1458, z = .07/12)
df <- df %>% mutate(fv = y * ((1+z)^x)
df <- df %>% mutate(fv = y * ((1+z)^x))
df$cumsum <- cumsum(df$fv)
df
sum(df[1, 4]:df[10, 4])
sum(df[, 4])
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
df <- data.frame(x = 1:360, y = 1458, z = .07/12)
df <- df %>% mutate(fv = y * ((1+z)^x))
df$cumsum <- cumsum(df$fv)
tail(df)
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
?plot
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
1458*360
input$years.w <- 30
df <- data.frame(Month = 1:360, Savings = 1458, Rate = .07/12)
df <- df %>% mutate(fv = Savings * ((1+Rate)^Month))
df$cumsum <- cumsum(df$fv)
tail(df)
head(df)
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
df <- data.frame(Month = 1:360, Months.end = 360:1, Savings = 1458, Rate = .07/12)
df <- df %>% mutate(fv = Savings * ((1+Rate)^Months.end))
df$cumsum <- cumsum(df$fv)
head(df)
tail(cumsum)
tail(df)
head(df)
df <- data.frame(Month = 1:30*12, Months.end = 360:1, Savings = 1458, Rate = .07/12)
tail9df
tail(df)
df <- data.frame(Month = 1:(30*12), Months.end = 360:1, Savings = 1458, Rate = .07/12)
tail(df)
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
library(shiny)
?titlePanel
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
?wellPanel
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
?round
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
library(plotly)
?plot_ly
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
?add_markers
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
200000 * (1.025^35)
400000 * (1.025^35)
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
shiny::runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
runApp('C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='yfriedman',
token='41A876B97D0B014BE6CE6822EA288EB4',
secret='<SECRET>')
rsconnect::setAccountInfo(name='yfriedman',
token='41A876B97D0B014BE6CE6822EA288EB4',
secret='mets')
rsconnect::setAccountInfo(name='yfriedman',
token='41A876B97D0B014BE6CE6822EA288EB4',
secret='mets6986')
rsconnect::setAccountInfo(name='yfriedman',
token='41A876B97D0B014BE6CE6822EA288EB4',
secret='<SECRET>')
Sys.setlocale(locale="English")
Sys.setlocale(locale="English")
rsconnect::setAccountInfo(name='yfriedman',
token='41A876B97D0B014BE6CE6822EA288EB4',
secret='<SECRET>')
rsconnect::setAccountInfo(name='yfriedman',
token='41A876B97D0B014BE6CE6822EA288EB4',
secret='E3Vau0VmZnOkeHlrgUWSrtR7zeth4bjvbovidecW')
library(rsconnect)
setwd("C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example")
rsconnect::deployApp('./swiss_example/')
getwd()
setwd("C:/Users/yfriedman/Desktop/Coursera/Course 9")
rsconnect::deployApp('./swiss_example/')
rsconnect::deployApp('./Cours 9/swiss_example/')
deployApp()
deployApp(appDir = getwd(), appTitle = "Retirement Calculator")
setwd("C:/Users/yfriedman/Desktop/Coursera/Course 9/swiss_example")
deployApp(appDir = getwd(), appTitle = "Retirement Calculator")
deployApp(appDir = getwd(), appTitle = "Retirement Calculator")
